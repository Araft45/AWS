AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with Public and Private Subnets, NAT Gateway, and Network ACLs in Mumbai (ap-south-1),and Security Groups Configuration'
Parameters:
  ImageId:
    Description: Image ID for base EC2 instance.
    Type: AWS::EC2::Image::Id
    Default: ami-001843b876406202a
  InstanceType:
    Description: Instance type to launch EC2 instances.
    Type: String
    Default: t3.micro
    AllowedValues: [t3.micro]
Resources:
  # VPC
  VPCIac:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnets (ap-south-1a)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
        - Key: Description
          Value: Public subnet in ap-south-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2
        - Key: Description
          Value: Public subnet in ap-south-1a

  # Private Subnets (ap-south-1b and ap-south-1c)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnet1
        - Key: Description
          Value: Private subnet in ap-south-1b

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: PrivatedbSubnet2
        - Key: Description
          Value: Private subnet in ap-south-1b

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1c
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnet3
        - Key: Description
          Value: Private subnet in ap-south-1c

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1c
      CidrBlock: 10.0.6.0/24
      Tags:
        - Key: Name
          Value: PrivatedbSubnet4
        - Key: Description
          Value: Private subnet in ap-south-1c

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach Gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCIac
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route (Change made here)
  PublicRoute:  # Ensure all required properties are defined
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # Route for internet traffic
      GatewayId: !Ref InternetGateway  # Specify the internet gateway

  # NAT Gateway Elastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyNatGatewayEIP

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1  # Choose any of your public subnets
      Tags:
        - Key: Name
          Value: MyNatGateway

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway  # Route traffic to NAT Gateway

  # Network ACLs
  # Public NACL (allow all inbound and outbound traffic)
  PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PublicNacl

  # Inbound rules for Public NACL (adjust based on your needs)
  InboundRulesPublicNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Protocol: -1 # Allow all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: false
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Outbound rules for Public NACL (adjust based on your needs)
  OutboundRulesPublicNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 200
      Protocol: -1 # Allow all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Subnet NACL Associations
  PublicSubnetNaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNacl

  PublicSubnetNaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNacl

  # Private NACL (allow outbound traffic to the internet only)
  PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PrivateNacl

  # Inbound rules for Private NACL (deny all inbound traffic by default)
  InboundRulesPrivateNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Protocol: -1 # Deny all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: false
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      

    # Outbound rules for Private NACL (allow outbound traffic to the internet)
  OutboundRulesPrivateNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 200
      Protocol: -1 # Allow all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Subnet NACL Associations
  PrivateSubnetNaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNaclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNaclAssociation4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      NetworkAclId: !Ref PrivateNacl

  # Private Subnet Route Table Association
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable

  # Public Route Table Association
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ExternalALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ExternalALBSecurityGroup
      GroupDescription: Security group for external application load balancer
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebTierSecurityGroup
      GroupDescription: Security group for public instances in the web tier
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ExternalALBSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  InternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: InternalLoadBalancerSecurityGroup
      GroupDescription: Security group for internal load balancer
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref WebTierSecurityGroup
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  AppTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
     GroupName: AppTierSecurityGroup
     GroupDescription: Security group for app tier
     VpcId: !Ref VPCIac
     SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref InternalLoadBalancerSecurityGroup
        IpProtocol: tcp
        FromPort: 4000
        ToPort: 4000
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
     SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DatabaseSecurityGroup
      GroupDescription: Security group for private database instances
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AppTierSecurityGroup
          IpProtocol: tcp 
          FromPort: 3306
          ToPort: 3306

  AuroraSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Free tier subnet group for Aurora
      SubnetIds:
        - !Ref PrivateSubnet2  # Subnet in AZ 1
        - !Ref PrivateSubnet4  # Subnet in AZ 2
      DBSubnetGroupName: FreeTierSubnetGroup

  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.06.0
      MasterUsername: admin
      MasterUserPassword: Arfat4545
      DBClusterIdentifier: database-1
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup

  AuroraDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref AuroraDBCluster
      Engine: aurora-mysql
      DBInstanceClass: db.r5.large 
      AvailabilityZone: ap-south-1c  # You can specify any AZ here
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      PubliclyAccessible: false

  AuroraDBInstanceReader:
    Type: AWS::RDS::DBInstance
    Properties:
     DBClusterIdentifier: !Ref AuroraDBCluster
     Engine: aurora-mysql
     DBInstanceClass: db.r5.large 
     AvailabilityZone: ap-south-1b  # Place reader instance in a different AZ
     DBSubnetGroupName: !Ref AuroraSubnetGroup
     PubliclyAccessible: false
      
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: demowebapp-araft45
      AccessControl: Private
      Tags:
        - Key: Name
          Value: demowebapp-araft45

  DemoEC2Role:
   Type: AWS::IAM::Role
   Properties:
     RoleName: DemoEC2Role
     AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
     Policies:
      - PolicyName: AllowSSMandS3Access
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:UpdateInstanceInformation"
                - "ssmmessages:CreateControlChannel"
                - "ssmmessages:CreateDataChannel"
                - "ssmmessages:OpenControlChannel"
                - "ssmmessages:OpenDataChannel"
              Resource: "*"
            - Effect: Allow
              Action: "s3:Get*"
              Resource: !Sub "arn:aws:s3:::${MyS3Bucket}/*"
              Condition:
                StringLike:
                  aws:Referer: "arn:aws:ec2:*:*:instance/*"
      - PolicyName: AllowRDSandSSMPermissions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "rds:DescribeDBInstances"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource: "*"
  DemoEC2InstanceProfile:
   Type: AWS::IAM::InstanceProfile
   Properties:
    Roles:
      - !Ref DemoEC2Role

  AMICreate:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
        - !GetAtt AppTierSecurityGroup.GroupId  # Use the security group ID
      SubnetId: !Ref PrivateSubnet1  # Use the subnet ID
      VpcId: !Ref VPCIac  # Specify the VPC ID
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo -su ec2-user 
          sudo yum install mysql -y
          sudo wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql 
          sudo yum install mysql57-community-release-el7-11.noarch.rpm -y
          sudo yum install mysql -y
          RDS_ENDPOINT=!GetAtt AuroraDBCluster.Endpoint.Address
          DB_USERNAME=$(aws ssm get-parameter --name /aurora/db/username --query Parameter.Value --output text)
          DB_PASSWORD=$(aws ssm get-parameter --with-decryption --name /aurora/db/password --query Parameter.Value --output text)
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "CREATE DATABASE webappdb;"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "SHOW DATABASES;"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "USE webappdb; CREATE TABLE IF NOT EXISTS transactions(id INT NOT NULL AUTO_INCREMENT, amount DECIMAL(10,2), description VARCHAR(100), PRIMARY KEY(id));"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "USE webappdb; SHOW TABLES;"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "USE webappdb; INSERT INTO transactions (amount, description) VALUES ('400', 'groceries');"
          sudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          source ~/.bashrc
          sudo source ~/.bashrc
          nvm install 16
          nvm use 16
          npm install -g pm2
          cd
          ls -rlt
          aws s3 cp s3://demowebapp-araft45/app-tier/ app-tier --recursive
          ls -lrt
          cd app-tier/
          pm2 start index.js
          pm2 startup 
          sudo env PATH=$PATH:/home/ec2-user/.nvm/versions/node/v16.20.0/bin /home/ec2-user/.nvm/versions/node/v16.20.0/lib/node_modules/pm2/bin/pm2 startup systemd -u ec2-user --hp/home/ec2-user
          pm2 save

      IamInstanceProfile: !Ref DemoEC2InstanceProfile
      ImageId: ami-001843b876406202a  # Replace with the desired AMI ID
      Tags:
        - Key: Name
          Value: DemoAppEC2Instance
    

  AMI:
    Type: Custom::AMI
    DependsOn: AMICreate
    Properties:
      ServiceToken: !GetAtt AMIFunction.Arn
      InstanceId: !Ref Instance

  AMIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          exports.handler = function(event, context) {
            console.log("Request received:\n", JSON.stringify(event));
            var physicalId = event.PhysicalResourceId;
            function success(data) {
              return response.send(event, context, response.SUCCESS, data, physicalId);
            }
            function failed(e) {
              return response.send(event, context, response.FAILED, e, physicalId);
            }
            // Call ec2.waitFor, continuing if not finished before Lambda function timeout.
            function wait(waiter) {
              console.log("Waiting: ", JSON.stringify(waiter));
              event.waiter = waiter;
              event.PhysicalResourceId = physicalId;
              var request = ec2.waitFor(waiter.state, waiter.params);
              setTimeout(()=>{
                request.abort();
                console.log("Timeout reached, continuing function. Params:\n", JSON.stringify(event));
                var lambda = new AWS.Lambda();
                lambda.invoke({
                  FunctionName: context.invokedFunctionArn,
                  InvocationType: 'Event',
                  Payload: JSON.stringify(event)
                }).promise().then((data)=>context.done()).catch((err)=>context.fail(err));
              }, context.getRemainingTimeInMillis() - 5000);
              return request.promise().catch((err)=>
                (err.code == 'RequestAbortedError') ?
                  new Promise(()=>context.done()) :
                  Promise.reject(err)
              );
            }
            var ec2 = new AWS.EC2(),
                instanceId = event.ResourceProperties.InstanceId;
            if (event.waiter) {
              wait(event.waiter).then((data)=>success({})).catch((err)=>failed(err));
            } else if (event.RequestType == 'Create' || event.RequestType == 'Update') {
              if (!instanceId) { failed('InstanceID required'); }
              ec2.waitFor('instanceStopped', {InstanceIds: [instanceId]}).promise()
              .then((data)=>
                ec2.createImage({
                  InstanceId: instanceId,
                  Name: event.RequestId
                }).promise()
              ).then((data)=>
                wait({
                  state: 'imageAvailable',
                  params: {ImageIds: [physicalId = data.ImageId]}
                })
              ).then((data)=>success({})).catch((err)=>failed(err));
            } else if (event.RequestType == 'Delete') {
              if (physicalId.indexOf('ami-') !== 0) { return success({});}
              ec2.describeImages({ImageIds: [physicalId]}).promise()
              .then((data)=>
                (data.Images.length == 0) ? success({}) :
                ec2.deregisterImage({ImageId: physicalId}).promise()
              ).then((data)=>
                ec2.describeSnapshots({Filters: [{
                  Name: 'description',
                  Values: ["*" + physicalId + "*"]
                }]}).promise()
              ).then((data)=>
                (data.Snapshots.length === 0) ? success({}) :
                ec2.deleteSnapshot({SnapshotId: data.Snapshots[0].SnapshotId}).promise()
              ).then((data)=>success({})).catch((err)=>failed(err));
            }
          };
      Runtime: nodejs18.x
      Timeout: 300

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeImages'
              - 'ec2:CreateImage'
              - 'ec2:DeregisterImage'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DeleteSnapshot'
              Resource: ['*']

Outputs:
  AMI:
    Value: !Ref AMI 

   # Target Group for instances
  AppTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: aaptier
      TargetType: instance
      Protocol: HTTP
      Port: 4000
      VpcId: !Ref VPCIac
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  # Add this section to your existing CloudFormation template

  # Internal Application Load Balancer
  InternalALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: apptier-internal-ALB
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet1  # Subnet in ap-south-1b
        - !Ref PrivateSubnet3  # Subnet in ap-south-1c
      SecurityGroups:
        - !Ref InternalLoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'  # Set idle timeout to 60 seconds

  # Listener for the ALB
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTierTargetGroup
      LoadBalancerArn: !Ref InternalALB
      Port: 80
      Protocol: HTTP

  # Listener Rule for HTTP Traffic
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppTierTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref ALBListener
      Priority: 1

  AppTierLaunchTemplate:
   Type: AWS::EC2::LaunchTemplate
   Properties:
    LaunchTemplateName: apptier-launch-template
    LaunchTemplateData:
      ImageId: !Ref AppTierImage  # Reference the AMI created by AppTierImage resource
      InstanceType: t3.micro
      SecurityGroupIds:
        - !GetAtt AppTierSecurityGroup.GroupId  # Use the AppTierSecurityGroup
      IamInstanceProfile: !Ref DemoEC2InstanceProfile

  AppTierAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: apptierasg
      LaunchTemplate:
        LaunchTemplateName: !Ref AppTierLaunchTemplate
        Version: "1"  # Keep it default version
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1  # Subnet in ap-south-1b
        - !Ref PrivateSubnet3  # Subnet in ap-south-1c
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref AppTierTargetGroup
      Tags:
        - Key: Name
          Value: AppTierASG
          PropagateAtLaunch: true
  DemowebserverInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt WebTierSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y mysql
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          source ~/.bashrc
          nvm install 16
          nvm use 16
          cd ~/
          aws s3 cp s3://${demowebapp-araft45}/web-tier/ web-tier --recursive
          cd ~/web-tier
          npm install
          npm run build
          sudo yum install nginx 
          sudo cd /etc/nginx/
          sudo ls
          sudo rm nginx.conf
          sudo aws s3 cp s3://${demowebapp-araft45}/nginx.conf /etc/nginx/nginx.conf
          sudo service nginx restart
          sudo chmod -R 755 /home/ec2-user
          sudo chkconfig nginx on
      Tags:
        - Key: Name
          Value: demowebserver
    DependsOn: DemoEC2InstanceProfile
 
  AMI:
  Type: Custom::AMI
  DependsOn: AMICreate
  Properties:
    ServiceToken: !GetAtt AMIFunction.Arn
    InstanceId: !Ref DemowebserverInstance

AMIFunction:
  Type: AWS::Lambda::Function
  Properties:
    Handler: index.handler
    Role: !GetAtt LambdaExecutionRole.Arn
    Code:
      ZipFile: !Sub |
        var response = require('cfn-response');
        var AWS = require('aws-sdk');
        exports.handler = function(event, context) {
          console.log("Request received:\n", JSON.stringify(event));
          var physicalId = event.PhysicalResourceId;
          function success(data) {
            return response.send(event, context, response.SUCCESS, data, physicalId);
          }
          function failed(e) {
            return response.send(event, context, response.FAILED, e, physicalId);
          }
          // Call ec2.waitFor, continuing if not finished before Lambda function timeout.
          function wait(waiter) {
            console.log("Waiting: ", JSON.stringify(waiter));
            event.waiter = waiter;
            event.PhysicalResourceId = physicalId;
            var request = ec2.waitFor(waiter.state, waiter.params);
            setTimeout(()=>{
              request.abort();
              console.log("Timeout reached, continuing function. Params:\n", JSON.stringify(event));
              var lambda = new AWS.Lambda();
              lambda.invoke({
                FunctionName: context.invokedFunctionArn,
                InvocationType: 'Event',
                Payload: JSON.stringify(event)
              }).promise().then((data)=>context.done()).catch((err)=>context.fail(err));
            }, context.getRemainingTimeInMillis() - 5000);
            return request.promise().catch((err)=>
              (err.code == 'RequestAbortedError') ?
                new Promise(()=>context.done()) :
                Promise.reject(err)
            );
          }
          var ec2 = new AWS.EC2(),
              instanceId = event.ResourceProperties.InstanceId;
          if (event.waiter) {
            wait(event.waiter).then((data)=>success({})).catch((err)=>failed(err));
          } else if (event.RequestType == 'Create' || event.RequestType == 'Update') {
            if (!instanceId) { failed('InstanceID required'); }
            ec2.waitFor('instanceStopped', {InstanceIds: [instanceId]}).promise()
            .then((data)=>
              ec2.createImage({
                InstanceId: instanceId,
                Name: event.RequestId
              }).promise()
            ).then((data)=>
              wait({
                state: 'imageAvailable',
                params: {ImageIds: [physicalId = data.ImageId]}
              })
            ).then((data)=>success({})).catch((err)=>failed(err));
          } else if (event.RequestType == 'Delete') {
            if (physicalId.indexOf('ami-') !== 0) { return success({});}
            ec2.describeImages({ImageIds: [physicalId]}).promise()
            .then((data)=>
              (data.Images.length == 0) ? success({}) :
              ec2.deregisterImage({ImageId: physicalId}).promise()
            ).then((data)=>
              ec2.describeSnapshots({Filters: [{
                Name: 'description',
                Values: ["*" + physicalId + "*"]
              }]}).promise()
            ).then((data)=>
              (data.Snapshots.length === 0) ? success({}) :
              ec2.deleteSnapshot({SnapshotId: data.Snapshots[0].SnapshotId}).promise()
            ).then((data)=>success({})).catch((err)=>failed(err));
          }
        };
    Runtime: nodejs18.x
    Timeout: 300
  

  # Target Group for Web Tier instances
  WebTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: webtier
     TargetType: instance
     Protocol: HTTP
     Port: 80
     VpcId: !Ref VPCIac
     HealthCheckPath: /health
     HealthCheckIntervalSeconds: 30
     HealthCheckTimeoutSeconds: 10
     HealthyThresholdCount: 2
     UnhealthyThresholdCount: 2

# Public Application Load Balancer
  PublicALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
     Name: webtier-public-ALB
     Scheme: internet-facing
     Subnets:
      - !Ref PublicSubnet1  # Subnet in public subnet 1
      - !Ref PublicSubnet2  # Subnet in public subnet 2
     SecurityGroups:
      - !Ref ExternalALBSecurityGroup
     LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'  # Set idle timeout to 60 seconds

# Listener for the public ALB
  PublicALBListener:
   Type: AWS::ElasticLoadBalancingV2::Listener
   Properties:
     DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebTierTargetGroup
     LoadBalancerArn: !Ref PublicALB
     Port: 80
     Protocol: HTTP

# Listener Rule for HTTP Traffic for public ALB
  PublicALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
     Actions:
      - Type: forward
        TargetGroupArn: !Ref WebTierTargetGroup
     Conditions:
      - Field: path-pattern
        Values:
          - "/*"
     ListenerArn: !Ref PublicALBListener
     Priority: 1

# Launch Template for Web Tier
  WebTierLaunchTemplate:
   Type: AWS::EC2::LaunchTemplate
   Properties:
    LaunchTemplateName: webtier-launch-template
    LaunchTemplateData:
      ImageId: !Ref WebTierImage  # Reference the AMI created for the Web Tier
      InstanceType: t3.micro
      SecurityGroupIds:
        - !GetAtt WebTierSecurityGroup.GroupId  # Use the WebTierSecurityGroup
      IamInstanceProfile: !Ref DemoEC2InstanceProfile

# Auto Scaling Group for Web Tier
  WebTierAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
     AutoScalingGroupName: webtierasg
     LaunchTemplate:
       LaunchTemplateName: !Ref WebTierLaunchTemplate
       Version: "1"  # Keep it default version
     VPCZoneIdentifier:
      - !Ref PublicSubnet1  # Subnet in public subnet 1
      - !Ref PublicSubnet2  # Subnet in public subnet 2
     MinSize: 2
     MaxSize: 2
     DesiredCapacity: 2
     TargetGroupARNs:
       - !Ref WebTierTargetGroup
     Tags:
      - Key: Name
        Value: WebTierASG
        PropagateAtLaunch: true

  