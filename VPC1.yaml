AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with Public and Private Subnets, NAT Gateway, and Network ACLs in Mumbai (ap-south-1),and Security Groups Configuration'

Resources:
  # VPC
  VPCIac:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnets (ap-south-1a)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
        - Key: Description
          Value: Public subnet in ap-south-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1a
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2
        - Key: Description
          Value: Public subnet in ap-south-1a

  # Private Subnets (ap-south-1b and ap-south-1c)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnet1
        - Key: Description
          Value: Private subnet in ap-south-1b

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1b
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: PrivatedbSubnet2
        - Key: Description
          Value: Private subnet in ap-south-1b

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1c
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnet3
        - Key: Description
          Value: Private subnet in ap-south-1c

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCIac
      AvailabilityZone: ap-south-1c
      CidrBlock: 10.0.6.0/24
      Tags:
        - Key: Name
          Value: PrivatedbSubnet4
        - Key: Description
          Value: Private subnet in ap-south-1c

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach Gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCIac
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route (Change made here)
  PublicRoute:  # Ensure all required properties are defined
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # Route for internet traffic
      GatewayId: !Ref InternetGateway  # Specify the internet gateway

  # NAT Gateway Elastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: MyNatGatewayEIP

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1  # Choose any of your public subnets
      Tags:
        - Key: Name
          Value: MyNatGateway

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway  # Route traffic to NAT Gateway

  # Network ACLs
  # Public NACL (allow all inbound and outbound traffic)
  PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PublicNacl

  # Inbound rules for Public NACL (adjust based on your needs)
  InboundRulesPublicNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 100
      Protocol: -1 # Allow all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: false
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Outbound rules for Public NACL (adjust based on your needs)
  OutboundRulesPublicNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: 200
      Protocol: -1 # Allow all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Subnet NACL Associations
  PublicSubnetNaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNacl

  PublicSubnetNaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNacl

  # Private NACL (allow outbound traffic to the internet only)
  PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCIac
      Tags:
        - Key: Name
          Value: PrivateNacl

  # Inbound rules for Private NACL (deny all inbound traffic by default)
  InboundRulesPrivateNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 100
      Protocol: -1 # Deny all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: false
      RuleAction: deny
      CidrBlock: 0.0.0.0/0

  # Outbound rules for Private NACL (allow outbound traffic to the internet)
    # Outbound rules for Private NACL (allow outbound traffic to the internet)
  OutboundRulesPrivateNacl:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: 200
      Protocol: -1 # Allow all protocols
      PortRange:
        From: 0
        To: 65535
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Subnet NACL Associations
  PrivateSubnetNaclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNaclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNaclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref PrivateNacl

  PrivateSubnetNaclAssociation4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      NetworkAclId: !Ref PrivateNacl

  # Private Subnet Route Table Association
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet4
      RouteTableId: !Ref PrivateRouteTable

  # Public Route Table Association
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ExternalALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ExternalALBSecurityGroup
      GroupDescription: Security group for external application load balancer
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebTierSecurityGroup
      GroupDescription: Security group for public instances in the web tier
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ExternalALBSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  InternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: InternalLoadBalancerSecurityGroup
      GroupDescription: Security group for internal load balancer
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref WebTierSecurityGroup
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  AppTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AppTierSecurityGroup
      GroupDescription: Security group for app tier
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref InternalLoadBalancerSecurityGroup
          IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DatabaseSecurityGroup
      GroupDescription: Security group for private database instances
      VpcId: !Ref VPCIac
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AppTierSecurityGroup
          IpProtocol: tcp 
          FromPort: 3306
          ToPort: 3306

  AuroraSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Free tier subnet group for Aurora
      SubnetIds:
        - !Ref PrivateSubnet2  # Subnet in AZ 1
        - !Ref PrivateSubnet4  # Subnet in AZ 2
      DBSubnetGroupName: FreeTierSubnetGroup

  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.06.0
      MasterUsername: admin
      MasterUserPassword: Arfat4545
      DBClusterIdentifier: database-1
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup

  AuroraDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref AuroraDBCluster
      Engine: aurora-mysql
      DBInstanceClass: db.r5.large 
      AvailabilityZone: ap-south-1c  # You can specify any AZ here
      DBSubnetGroupName: !Ref AuroraSubnetGroup
      PubliclyAccessible: false

  AuroraDBInstanceReader:
    Type: AWS::RDS::DBInstance
    Properties:
     DBClusterIdentifier: !Ref AuroraDBCluster
     Engine: aurora-mysql
     DBInstanceClass: db.r5.large 
     AvailabilityZone: ap-south-1b  # Place reader instance in a different AZ
     DBSubnetGroupName: !Ref AuroraSubnetGroup
     PubliclyAccessible: false
      
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: demowebapp-araft45
      AccessControl: Private
      Tags:
        - Key: Name
          Value: demowebapp-araft45
  
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: demowebapp-araft45
      AccessControl: Private
      Tags:
        - Key: Name
          Value: demowebapp-araft45

  DemoEC2Role:
   Type: AWS::IAM::Role
   Properties:
     RoleName: DemoEC2Role
     AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
     Policies:
      - PolicyName: AllowSSMandS3Access
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "ssm:UpdateInstanceInformation"
                - "ssmmessages:CreateControlChannel"
                - "ssmmessages:CreateDataChannel"
                - "ssmmessages:OpenControlChannel"
                - "ssmmessages:OpenDataChannel"
              Resource: "*"
            - Effect: Allow
              Action: "s3:Get*"
              Resource: !Sub "arn:aws:s3:::${MyS3Bucket}/*"
              Condition:
                StringLike:
                  aws:Referer: "arn:aws:ec2:*:*:instance/*"
      - PolicyName: AllowRDSandSSMPermissions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "rds:DescribeDBInstances"
                - "ssm:GetParameter"
                - "ssm:GetParameters"
              Resource: "*"
              
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroupIds:
        - !GetAtt AppTierSecurityGroup.GroupId  # Use the security group ID
      SubnetId: !Ref PrivateSubnet1  # Use the subnet ID
      VpcId: !Ref VPCIac  # Specify the VPC ID
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum install mysql -y
          sudo wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql
          sudo yum install mysql57-community-release-el7-11.noarch.rpm -y
          sudo yum install mysql -y
          RDS_ENDPOINT=!GetAtt AuroraDBCluster.Endpoint.Address
          DB_USERNAME=$(aws ssm get-parameter --name /aurora/db/username --query Parameter.Value --output text)
          DB_PASSWORD=$(aws ssm get-parameter --with-decryption --name /aurora/db/password --query Parameter.Value --output text)
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "CREATE DATABASE webappdb;"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "SHOW DATABASES;"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "USE webappdb; CREATE TABLE IF NOT EXISTS transactions(id INT NOT NULL AUTO_INCREMENT, amount DECIMAL(10,2), description VARCHAR(100), PRIMARY KEY(id));"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "USE webappdb; SHOW TABLES;"
          mysql -h $RDS_ENDPOINT -u $DB_USERNAME -p$DB_PASSWORD -e "USE webappdb; INSERT INTO transactions (amount, description) VALUES ('400', 'groceries');"
      
      IamInstanceProfile: !Ref DemoEC2Role
      KeyName: ''
      ImageId: ami-001843b876406202a  # Replace with the desired AMI ID
      Tags:
        - Key: Name
          Value: DemoAppEC2Instance

   